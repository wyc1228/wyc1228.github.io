<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java Annotation(注解)</title>
    <url>/2020/09/09/Annotation(%E6%B3%A8%E8%A7%A3)/</url>
    <content><![CDATA[<h2 id="Annotation-注解"><a href="#Annotation-注解" class="headerlink" title="Annotation(注解)"></a>Annotation(注解)</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>注解是jdk 5.0 新增的功能，Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</p>
<p>通过使用 Annotation,程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。</p>
<p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</p>
<p>在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</p>
<p><code>框架 = 注解 + 反射机制 + 设计模式</code></p>
<h3 id="1-2-声明注解"><a href="#1-2-声明注解" class="headerlink" title="1.2 声明注解"></a>1.2 声明注解</h3><p>注解是一种代码级别的说明.它与<code>类</code>，<code>接口</code>，<code>枚举</code>在同一个层次,它可以声明在<code>包</code>，<code>类</code>，<code>字段</code>，<code>方法</code>，<code>局部变量</code>，<code>方法参数</code>等的前面用来对这些元素进行说明注释</p>
<h3 id="1-3-注解的分类"><a href="#1-3-注解的分类" class="headerlink" title="1.3 注解的分类"></a>1.3 注解的分类</h3><ul>
<li>基本注解</li>
<li>元注解</li>
<li>自定义注解</li>
</ul>
<h3 id="1-4-基本注解"><a href="#1-4-基本注解" class="headerlink" title="1.4 基本注解"></a>1.4 基本注解</h3><p><code>java.lang</code>包下注解分别是 : <code>@Override</code>,<code>@Deprecated</code>,<code>@SuppressWarnings</code>,<code>@FunctionalInterface</code>,<code>@SafeVarargs</code>,</p>
<ul>
<li><p><code>@Override</code>: 限定重写父类方法, 该注解只能用于方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@Deprecated</code>: 用于表示所修饰的元素(类, 方法等)<code>已过时</code>。表示此方法或类不再建议使用，调用时也会出现删除线，通常是因为所修饰的结构危险或存在更好的选择，如<code>ViewPager</code>中的<code>setOnPageChangeListener</code>方法，已过时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnPageChangeListener</span><span class="params">(OnPageChangeListener listener)</span> </span>&#123;</span><br><span class="line">    mOnPageChangeListener = listener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@SuppressWarnings</code>: 抑制编译器警告</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unused&quot;,&quot;rawtypes&quot;&#125;)</span></span><br><span class="line">        ArrayList arrayList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@FunctionalInterface</code>： 示例</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//`Java8`为函数式接口引入了一个新注解`@FunctionalInterface`,其主要用于编译错误检查,</span></span><br><span class="line"><span class="comment">//加上该注释后当你写的接口不符合函数式定义时,编译器就会报错 !</span></span><br><span class="line"><span class="comment">//注意: 是否添加`@FunctionalInterface`对于接口是不是函数式接口没有影响,</span></span><br><span class="line"><span class="comment">//该注释只是提醒`编译器`去检查该接口是否仅仅包含一个抽象方法.</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">functionalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注意: 函数式接口中只能有一个抽象方法 !</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">myLambda</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 函数式接口里是可以包含默认方法,因为默认方法不是抽象方法,其有一个默认实现,</span></span><br><span class="line">    <span class="comment">//所以是符合函数式接口的定义的.</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// method body..</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 函数式接口里是可以包含静态方法,因为静态方法不能是抽象方法,是一个已经实现了的方法,</span></span><br><span class="line">    <span class="comment">//所以是符合函数式接口的定义的.</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// method body..</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 函数式接口里是可以包含Object里的public方法,这些方法对于函数式接口来说,</span></span><br><span class="line">	<span class="comment">// 不被当成是抽象方法(虽然它们是抽象方法).因为任何一个函数式接口的实现,默认都继承了Object类,</span></span><br><span class="line">    <span class="comment">//其包含了来自java.lang.Object里对这些抽象方法的实现!</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用`@FunctionalInterface`注解的函数式接口继而可以使用`Lambda`表示式来表示该接口的一个实现.</span></span><br><span class="line"><span class="comment">//(Java8 之前一般是使用匿名类实现的).</span></span><br><span class="line"><span class="comment">//functionalInterface  f = message-&gt;System.out.println();</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>@SafeVarargs</code>： 声明具有模糊类型（比如：泛型）的可变参数的构造函数或方法时，Java编译器会报unchecked警告。鉴于这些情况，如果程序员断定声明的构造函数和方法的主体不会对其varargs参数执行潜在的不安全的操作，可使用@SafeVarargs进行标记，这样的话，Java编译器就不会报unchecked警告。</p>
<p>只能用于标记构造函数和方法，由于保留策略声明为RUNTIME，所以此注解可以在运行时生效。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeVarargsAnnotation</span>&lt;<span class="title">S</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> S[] args;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数可以使用@SafeVarargs标记</span></span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeVarargsAnnotation</span><span class="params">(S... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此处不能使用@SafeVarargs，因为此方法未声明为static或final方法，</span></span><br><span class="line">    <span class="comment">//如果要抑制unchecked警告，可以使用@SuppressWarnings注解</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="comment">//@SafeVarargs</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopPrintArgs</span><span class="params">(S... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (S arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//final方法可以使用@SafeVarargs标记</span></span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printSelfArgs</span><span class="params">(S... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (S arg : <span class="keyword">this</span>.args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SafeVarargsAnnotation.loopPrintInfo(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static方法可以使用@SafeVarargs标记</span></span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">loopPrintInfo</span><span class="params">(T ... infos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T info : infos) &#123;</span><br><span class="line">            System.out.println(info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果以上把@SafeVarargs标记注释掉，在编译时就会报unchecked警告</p>
<h3 id="1-5-元注解"><a href="#1-5-元注解" class="headerlink" title="1.5 元注解"></a>1.5 元注解</h3><p><code>java.lang.annotation</code>包下的注解分别是 : <code>@Retention</code>,<code>@Documnetd</code>,<code>@Target</code>,<code>@Inherited</code></p>
<p>以上四个注解被称为<code>元注解</code>,其作用是负责注解其它的注解,用来提供对其它<code>annotation</code>类型做说明.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意: <code>JDK8</code>在<code>java.lang.annotation</code>中添加了<code>Repeatable</code>和<code>Native</code>注解.其中<code>Repeatable</code>支持重复注解,<code>Native</code>用于注解本机代码可以访问的域变量</p>
<ul>
<li><p><code>Retention</code>：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS\RUNTIME，只有声明为RUNTIME生命周期的注解，才能通过反射获取。</p>
<ol>
<li><code>RetentionPolicy.SOURCE</code>：注解只在源码阶段保留，编译器开始编译时它将被丢弃忽视</li>
<li><code>RetentionPolicy.CLASS</code>：注解会保留到编译期，但运行时不会把它加载到JVM中（默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得）</li>
<li><code>RetentionPolicy.RUNTIME</code>：注解可以保留到程序运行时，它会被加载到JVM中，所以程序运行过程中可以获取到它们</li>
</ol>
</li>
<li><p><code>Target</code>:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p>
<ol>
<li><code>ElementType.PACKAGE</code>：可作用在包上</li>
<li><code>ElementType.TYPE</code>：可作用在类、接口、枚举上</li>
<li><code>ElementType.ANNOTATION_TYPE</code>：可以作用在注解上</li>
<li><code>ElementType.FIELD</code>：可作用在属性上</li>
<li><code>ElementType.CONSTRUCTOR</code>：可作用在构造方法上</li>
<li><code>ElementType.METHOD</code>：可作用在方法上</li>
<li><code>ElementType.PARAMETER</code>：可作用在方法参数上</li>
<li><code>ElementType.LOCAL_VARIABLE</code>：可作用在局部变量上，例如方法中定义的变量</li>
<li><code>ElementType.TYPE_PARAMETER</code>:可作用在类参数的声明上   如：泛型声明。Since jdk1.8以后添加的</li>
<li><code>ElementType.TYPE_USE</code>:可作用在使用的类型  Since jdk1.8以后添加的</li>
</ol>
</li>
<li><p><code>Documented</code>:表示所修饰的注解在被javadoc解析时，保留下来。（不常用）</p>
</li>
<li><p><code>Inherited</code>:被它修饰的 Annotation 将具继承性，一个父类被该类注解修饰，那么它的子类如果没有任何注解修饰，就会继承父类的这个注解。（不常用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Person &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Person</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherA</span> <span class="keyword">extends</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解Person被@Inherited修饰，Teacher被Person修饰，TeacherA继承Teacher（TeacherA上又无其他注解），那么TeacherA就会拥有Person这个注解。</p>
</li>
</ul>
<h4 id="重复注解"><a href="#重复注解" class="headerlink" title="重复注解"></a>重复注解</h4><ul>
<li><p><code>Repeatable</code>：支持重复注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Persons &#123;</span><br><span class="line">   Person[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Persons.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Person&#123;</span><br><span class="line">    <span class="function">String <span class="title">role</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Person(role=&quot;Teacher&quot;)</span></span><br><span class="line"><span class="meta">@Person(role=&quot;Student&quot;)</span></span><br><span class="line"><span class="meta">@Person(role=&quot;Doctor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    String name=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="1-6-自定义注解"><a href="#1-6-自定义注解" class="headerlink" title="1.6  自定义注解"></a>1.6  自定义注解</h3><h4 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h4><p>注解的属性也叫做成员变量，注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(Persons.class)</span></span><br><span class="line"><span class="keyword">public</span>  <span class="meta">@interface</span> Person&#123;</span><br><span class="line">    <span class="function">String <span class="title">role</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解Person里面的role属性，role是一个成员变量，只不过书写形式为 String role() default “”； 即所谓的“无形参的方法”形式书写，给role设置了默认值为空字符串 default “”。</p>
<h4 id="标记注解"><a href="#标记注解" class="headerlink" title="标记注解"></a>标记注解</h4><p>因为<code>标记注解没有成员</code>,所以应用标记注解时,后面不需要有圆括号.如果提供空的圆括号,也不会报错,但不是必需的.类似地,对于所有成员都使用<code>默认值(default)</code>的注解也可以没有圆括号.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyMarker_annotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li><p>注解声明为：@interface</p>
<ul>
<li>内部定义成员，通常使用value表示</li>
<li>可以指定成员的默认值，使用default定义</li>
<li>如果自定义注解没成员，表明是一个标识作用。</li>
</ul>
</li>
<li><p>自定义注解是以元注解为基础注解自己定义的注解。</p>
</li>
</ul>
<p>自定义运行是注解分为两步：声明注解、解析注解。</p>
<h4 id="声明注解"><a href="#声明注解" class="headerlink" title="声明注解"></a>声明注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//指定保留策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Animal &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是自己定义了一个注解Animal，Animal含有一个int类型的属性，该属性的名称为value，默认值为5。该注解主要用来注解成员变量，作用于运行期。</p>
<h4 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Animal(value = 12)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestMain testMain=<span class="keyword">new</span> TestMain();</span><br><span class="line">        Class clazz=testMain.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field fieldAge=clazz.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            Animal animal=fieldAge.getAnnotation(Animal.class);</span><br><span class="line">            System.out.println(animal.value()+<span class="string">&quot;===岁===&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面通过类的反射机制解析注解，先拿到TestMain类里面的age成员变量，再通过成员变量调用getAnnotation方法拿到该成员变量的注解。</p>
<h4 id="反射获取注解信息"><a href="#反射获取注解信息" class="headerlink" title="反射获取注解信息"></a>反射获取注解信息</h4><ul>
<li>定义注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//指定保留策略</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;<span class="keyword">default</span> value&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>反射获取自定义注解信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getAnnotationInfo</span> </span>&#123;</span><br><span class="line">	<span class="meta">@MyAnnotation(name = &quot;Hello annotation !&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> d, String s)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		getAnnotationInfo getInfo = <span class="keyword">new</span> getAnnotationInfo();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取Class对象</span></span><br><span class="line">		Class&lt;?&gt; class1 = getInfo.getClass();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与方法相关的信息</span></span><br><span class="line">			Method method = class1.getMethod(<span class="string">&quot;fun&quot;</span>, <span class="keyword">double</span>.class, String.class);</span><br><span class="line">			<span class="comment">// 通过调用`getAnnotation`获取与对象相关联的特定注解</span></span><br><span class="line">			MyAnnotation annotatioin = method.getAnnotation(MyAnnotation.class);</span><br><span class="line">			System.out.println(<span class="string">&quot;id : &quot;</span> + annotatioin.id() + <span class="string">&quot;\nname : &quot;</span> + annotatioin.name());</span><br><span class="line">            <span class="comment">//id : 1 </span></span><br><span class="line">            <span class="comment">//name : Hello annotation </span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>反射获取所有注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@MyAnnotation()</span></span><br><span class="line"><span class="meta">@MyAnnotation2(description = &quot;Test class&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getAllAnnotationInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@MyAnnotation(id = 1, name = &quot;Hello annotation !&quot;)</span></span><br><span class="line">	<span class="meta">@MyAnnotation2(description = &quot;Test method&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">		getAllAnnotationInfo allAnnotationInfo = <span class="keyword">new</span> getAllAnnotationInfo();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 通过`getAnnoations`获取该类所有注解信息</span></span><br><span class="line">		Annotation annotation[] = allAnnotationInfo.getClass().getAnnotations();</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;`getAllAnnotationInfo`类的所有注解 : &quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (Annotation info : annotation) &#123;</span><br><span class="line">			System.out.println(info);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="comment">// 通过调用Class泛型类提供的`getMethod`方法获取与方法相关的信息</span></span><br><span class="line">		Method method = allAnnotationInfo.getClass().getMethod(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">		<span class="comment">// 通过调用`getAnnotation`获取与对象相关联的特定注解</span></span><br><span class="line">		annotation = method.getAnnotations();</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;方法`fun()`的所有注解 : &quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (Annotation info : annotation) &#123;</span><br><span class="line">			System.out.println(info);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+github搭建个人博客</title>
    <url>/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Hexo-github搭建个人博客"><a href="#Hexo-github搭建个人博客" class="headerlink" title="Hexo+github搭建个人博客"></a>Hexo+github搭建个人博客</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>下载两个软件 <code>NodeJs</code> 和 <code>Git</code>，我用的是这两个版本的<img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908205500251.png" alt="image-20200908205500251"></p>
<p>你们可以自己在官网下载，然后找个地方安装好</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.jpg" alt="批注 2020-09-08 204850"></p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.jpg" alt="批注 2020-09-08 205037"></p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>新建一个文件夹，以后博客内容放在此文件夹中，名字自取</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908205847652.png" alt="image-20200908205847652"></p>
<p>然后在此界面输入cmd，然后回车</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908210202406.png" alt="image-20200908210202406"></p>
<p>进入到此页面后输入以下命令</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908210300373.png" alt="image-20200908210300373"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>//用来设置镜像网站，下面的下载会快很多</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908210447090.png" alt="image-20200908210447090"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/9.png" alt="9"></p>
<p>（xxx是你的博客的名字）如：betblog（bet+blog）的格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init xxxblog</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908211305999.png" alt="image-20200908211305999"></p>
<p>完成之后进入你的博客目录中安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd xxxblog</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908211335457.png" alt="image-20200908211335457"></p>
<p>在此目录(E:\blog\betblog)下执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>完成之后，本地服务器搭建完毕，此时可以运行本地服务器看看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908211858920.png" alt="image-20200908211858920"></p>
<p>复制此网址，在浏览器打开</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908211932952.png" alt="image-20200908211932952"></p>
<p>出现这样的页面说明本地服务器搭建完毕，接下来就是将此网站与github连接</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>准备一个github账号，创建一个库</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908212215126.png" alt="image-20200908212215126"></p>
<p>然后可以测试一下自己的github的网址(用户名.github.io)是否可用(可省略)</p>
<p>新建一个index.html,里面输入hello word，然后再浏览器输入自己的github的网址(例如：用户名.github.io)查看</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908212520528.png" alt="image-20200908212520528"></p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908212544538.png" alt="image-20200908212544538"></p>
<p>至此，github的网址也运行成功</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>将hexo和github关联，需要用到git</p>
<p>打开blog文件夹，进入到xxxblog文件夹中打开cmd输入以下命令，安装git依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908213047451.png" alt="image-20200908213047451"></p>
<p>然后我们在安装好的git文件夹中找到git-bash程序，也可以鼠标右键打开(在哪文件夹下打开都可以)</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908213346362.png" alt="image-20200908213346362"></p>
<p>然后输入以下几行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;此處填寫你綁定github的郵箱地址&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C  &quot;此處填你綁定github的郵箱地址&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908213849487.png" alt="image-20200908213849487"></p>
<p>出现次次界面则表示成功</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908213927110.png" alt="image-20200908213927110"></p>
<p>然后我们打开C盘——打开用户——打開你當前使用的用户名见图</p>
<p>你會找到一个叫<strong>ssh</strong>的文件夹 里面有一个**.pub** 格式的叫 <strong>id_rsa</strong>的文件</p>
<p>打开它复制里面的内容</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908214117397.png" alt="image-20200908214117397"></p>
<p>我们复制ssh到你的github 的 New SSH keys中</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908214202757.png" alt="image-20200908214202757"></p>
<p>最后修改以下blog文件夹中的_config.yml文件，打开文件<br><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png" alt="3"></p>
<p>拉到文本内容最下面</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908214432362.png" alt="image-20200908214432362"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">type:  git</span><br><span class="line">repository: 此处填写你的仓库地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p>仓库地址在github上复制</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908214541605.png" alt="image-20200908214541605"></p>
<p>然后再修改url，拉到文本内容开头</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908214654078.png" alt="image-20200908214654078"></p>
<p>然后ctrl+s保存，关闭文件</p>
<p>最后，打开blog文件夹进入xxxblog，打开cmd</p>
<p>输入hexo cl清除缓存然后输入hexo g部署，最后输入hexo d上传仓库上传仓库需要输入github用户名和密码</p>
<p><img src="/2020/09/08/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20200908215230460.png" alt="image-20200908215230460"></p>
<p>至此，博客搭建完成</p>
<p><a href="https://bet-yc.gitee.io/2020/04/28/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%96%87%E5%AD%97%E6%95%99%E7%A8%8B%E5%86%85%E5%90%AB%E6%89%80%E9%9C%80%E4%BB%A3%E7%A0%81/">参考文章</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java Reflection(反射)</title>
    <url>/2020/09/10/Reflection(%E5%8F%8D%E5%B0%84)/</url>
    <content><![CDATA[<h2 id="Reflection-反射"><a href="#Reflection-反射" class="headerlink" title="Reflection(反射)"></a>Reflection(反射)</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期 借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。 </p>
<ul>
<li>框架 = 反射 + 注解 + 设计模式。</li>
</ul>
<h3 id="1-2-反射机制提供的功能"><a href="#1-2-反射机制提供的功能" class="headerlink" title="1.2 反射机制提供的功能"></a>1.2 反射机制提供的功能</h3><ol>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的成员变量和方法</li>
<li>在运行时获取泛型信息</li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li>在运行时处理注解</li>
<li>生成动态代理</li>
</ol>
<h3 id="1-3-反射相关的主要API"><a href="#1-3-反射相关的主要API" class="headerlink" title="1.3 反射相关的主要API"></a>1.3 反射相关的主要API</h3><ul>
<li><code>java.lang.Class</code>:代表一个类</li>
<li><code>java.lang.reflect.Method</code>:代表类的方法</li>
<li><code>java.lang.reflect.Field</code>:代表类的成员变量</li>
<li><code>java.lang.reflect.Constructor</code>:代表类的构造器</li>
</ul>
<h3 id="1-4-详解Class类"><a href="#1-4-详解Class类" class="headerlink" title="1.4 详解Class类"></a>1.4 详解Class类</h3><ul>
<li>先上代码，了解反射的基本实现步骤，通过反射对Person类进行操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">       <span class="comment">//通过反射创建Person类对象</span></span><br><span class="line">       Constructor cons = clazz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">       Object obj = cons.newInstance(<span class="string">&quot;tom&quot;</span>, <span class="number">12</span>);</span><br><span class="line">       Person p=(Person)obj;</span><br><span class="line">       System.out.println(p.toString());<span class="comment">//Person&#123;name=&#x27;tom&#x27;, age=12&#125;</span></span><br><span class="line">       <span class="comment">//通过反射调用对象指定的属性和指定的方法</span></span><br><span class="line">       <span class="comment">//调用属性</span></span><br><span class="line">       Field age = clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">       age.set(p,<span class="number">2</span>);</span><br><span class="line">       System.out.println(p);<span class="comment">//Person&#123;name=&#x27;tom&#x27;, age=2&#125;</span></span><br><span class="line">       <span class="comment">//调用方法</span></span><br><span class="line">       Method show = clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">       show.invoke(p);<span class="comment">//show()方法</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//通过反射，可以调用person类的私有属性和方法</span></span><br><span class="line">       Constructor&lt;Person&gt; constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">       constructor.setAccessible(<span class="keyword">true</span>);<span class="comment">//这一步是调用私有构造器的关键</span></span><br><span class="line">       Person person = constructor.newInstance(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">       System.out.println(person);<span class="comment">//Person&#123;name=&#x27;jerry&#x27;, age=0&#125;</span></span><br><span class="line">       <span class="comment">//调用私有属性</span></span><br><span class="line">       Field name = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       name.setAccessible(<span class="keyword">true</span>);<span class="comment">//这一步是调用私有属性的关键</span></span><br><span class="line">       name.set(person,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">       System.out.println(person);<span class="comment">//Person&#123;name=&#x27;zhangsan&#x27;, age=0&#125;</span></span><br><span class="line">       <span class="comment">//调用私有方法</span></span><br><span class="line">       Method showNation = clazz.getDeclaredMethod(<span class="string">&quot;showNation&quot;</span>, String.class);</span><br><span class="line">       showNation.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       Object nation = showNation.invoke(person,<span class="string">&quot;中国&quot;</span>);<span class="comment">//showNation()方法</span></span><br><span class="line">       String nat=(String)nation;</span><br><span class="line">       System.out.println(nat);<span class="comment">//中国</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>首先，根据上述代码，首先要获取一个Class类的实例(clazz)，此实例就是Person.class，Person.class就是运行时类</p>
<ol>
<li>类的加载过程：<br>程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。<br>接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件<br>加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此<br>运行时类，就作为Class的一个实例。</li>
<li>换句话说，Class的实例就对应着一个运行时类。</li>
<li>加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式<br>来获取此运行时类。</li>
</ol>
<p>在Object类中定义了以下的方法，此方法 将被所有子类继承： </p>
<p><code>public final Class getClass()</code><br>以上的方法返回值的类型是一个Class类， 此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即： 可以<code>通过对象反射求出类的名称</code>。</p>
<ul>
<li>正常方式 : 引入需要的<code>包类</code>名称 ——&gt; 通过<code>new</code>实例化 ——&gt; 取得实例化对象</li>
<li>反射方式 : 实例化对象 ——&gt; <code>getClass()</code> ——&gt; 得到完整的<code>包类</code>名称</li>
</ul>
<h3 id="1-5-四种获取Class类实例的方式"><a href="#1-5-四种获取Class类实例的方式" class="headerlink" title="1.5 四种获取Class类实例的方式"></a>1.5 四种获取Class类实例的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">       Class&lt;Person&gt; clazz1 = Person.class;</span><br><span class="line">       System.out.println(clazz1);<span class="comment">//class com.review.reflection.Person,person类本身</span></span><br><span class="line">       <span class="comment">//方式二：通过运行时类的对象,调用getClass()方法</span></span><br><span class="line">       Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">       Class&lt;? extends Person&gt; clazz2 = p1.getClass();</span><br><span class="line">       System.out.println(clazz2);<span class="comment">//class com.review.reflection.Person,person类本身</span></span><br><span class="line">       <span class="comment">//方式三：调用Class的静态方法.forName(String classPath)</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Class&lt;?&gt; clazz3 = Class.forName(<span class="string">&quot;com.review.reflection.Person&quot;</span>);</span><br><span class="line">           System.out.println(clazz3);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(clazz1==clazz2);<span class="comment">//true</span></span><br><span class="line">       <span class="comment">//上面三种方式获取的都是同一个运行时类，同一个内存地址</span></span><br><span class="line">       <span class="comment">//方式四：使用类的加载器ClassLoader，通过classLoader获取Class类实例</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           ClassLoader classLoader = Person.class.getClassLoader();</span><br><span class="line">           Class&lt;?&gt; clazz4 = classLoader.loadClass(<span class="string">&quot;com.review.reflection.Person&quot;</span>);</span><br><span class="line">           System.out.println(clazz4);<span class="comment">//com.review.reflection.Person</span></span><br><span class="line">           System.out.println(clazz1==clazz4);<span class="comment">//true</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//四种方式获取的运行时类都是一样的，地址相同</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-哪些类型有Class对象"><a href="#1-6-哪些类型有Class对象" class="headerlink" title="1.6 哪些类型有Class对象"></a>1.6 哪些类型有Class对象</h3><ul>
<li>class： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 </li>
<li>interface：接口 </li>
<li>[]：数组 </li>
<li>enum：枚举 </li>
<li>annotation：注解@interface </li>
<li>primitive type：基本数据类型 </li>
<li>void</li>
</ul>
<h3 id="1-7-类加载器ClassLoader"><a href="#1-7-类加载器ClassLoader" class="headerlink" title="1.7 类加载器ClassLoader"></a>1.7 类加载器ClassLoader</h3><p>类加载器的作用:把<code>类(class)</code>装载进内存.如下示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java源文件(*.java) ——Java编译器——&gt; 字节码文件(*.class) ——类加载器+字节码效验器+解释器——&gt; 操作系统平台</span><br></pre></td></tr></table></figure>

<p><strong>类加载的过程</strong>：</p>
<p>当程序主动使用某个类时,如果该类还未被<code>加载</code>到内存中,则系统会通知如下三个步骤来对该类进行初始化.</p>
<ol>
<li>类的加载 : 将类的<code>Class</code>文件读入到内存,并为之创建一个<code>java.lang.Class</code>对象,此过程由类加载器完成.</li>
<li>类的链接 : 将类的<code>二进制</code>数据合并到<code>JRE</code>中.</li>
<li>类的初始化 : <code>JVM</code>负责对类进行初始化.</li>
</ol>
<p><code>JVM</code>规范定义了两种类型的类加载器:<code>启动类加载器(bootstrap)</code>和<code>用户自定义加载器(user-defined class loader)</code>，JVM在运行时会产生<code>三个类加载器</code></p>
<ol>
<li>引导类加载器:<code>JVM</code>自带的类加载器,负责Java平台核心库,用来加载核心类库,该加载器无法直接获取.</li>
<li>扩展类加载器:负责<code>jar包</code>或将指定目录下的<code>jar包</code>装入工作库.</li>
<li>系统类加载器:负责<code>java-classpath</code>或<code>java.class.path</code>所指的目录下的类与<code>jar</code>包装入工作.(最常用)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//对于自定义类，使用系统类加载器加载</span></span><br><span class="line">       ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();//由系统类加载器加载</span><br><span class="line">       System.out.println(classLoader);<span class="comment">//AppClassLoader</span></span><br><span class="line">       <span class="comment">//调用系统类加载器的getParent()方法可以获取扩展类加载器</span></span><br><span class="line">       ClassLoader classLoader1 = classLoader.getParent();<span class="comment">//获取扩展类加载器</span></span><br><span class="line">       System.out.println(classLoader1);<span class="comment">//PlatformClassLoader</span></span><br><span class="line">       <span class="comment">//调用扩展类加载器的getParent()方法无法获取引导类加载器</span></span><br><span class="line">       ClassLoader classLoader2 = classLoader1.getParent();</span><br><span class="line">       System.out.println(classLoader2);<span class="comment">//null引导类加载器获取不到，主要加载java核心类库，无法加载自定义类</span></span><br><span class="line"></span><br><span class="line">       ClassLoader classLoader3 = String.class.getClassLoader();</span><br><span class="line">       System.out.println(classLoader3);<span class="comment">//null,引导类加载器无法拿到</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用：使用ClassLoader加载配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">       <span class="comment">//此时文件默认在当前的module下</span></span><br><span class="line">       <span class="comment">//读取配置文件1</span></span><br><span class="line">       <span class="comment">/*FileInputStream fis=new FileInputStream(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">       properties.load(fis);*/</span></span><br><span class="line">       <span class="comment">//读取配置文件2，使用classloader</span></span><br><span class="line">       <span class="comment">//文件默认识别在当前module下的src下</span></span><br><span class="line">       ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">       InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">       properties.load(is);</span><br><span class="line"></span><br><span class="line">       String user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       String password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       System.out.println(user+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-newInstance-创建运行时类的对象"><a href="#1-8-newInstance-创建运行时类的对象" class="headerlink" title="1.8 newInstance()创建运行时类的对象"></a>1.8 newInstance()创建运行时类的对象</h3><p><code>newInstance()</code>:调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。</p>
<p>要想此方法正常的创建运行时类的对象，要求：</p>
<ol>
<li>运行时类必须提供空参的构造器</li>
<li>空参的构造器的访问权限得够。通常，设置为public。</li>
</ol>
<p>在javabean中要求提供一个public的空参构造器。原因：</p>
<ol>
<li>便于通过反射，创建运行时类的对象</li>
<li>便于子类继承此运行时类时，默认调用super()时，保证父类此构造器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       newInstance():调用此方法，创建对应的运行时类的对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Person person = clazz.newInstance();<span class="comment">//java9之后已过时</span></span><br><span class="line">       System.out.println(person);</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       Person person1 = clazz.getDeclaredConstructor().newInstance();<span class="comment">//推荐</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-9-获取运行时类的指定结构"><a href="#1-9-获取运行时类的指定结构" class="headerlink" title="1.9 获取运行时类的指定结构"></a>1.9 获取运行时类的指定结构</h3><ol>
<li><p>获取成员变量们</p>
<ul>
<li><code>Field[] getFields()</code> ：获取所有public修饰的成员变量(属性)</li>
<li><code>Field getField(String name)</code>:获取指定名称的 public修饰的成员变量(属性)</li>
<li><code>Field[] getDeclaredFields()</code>:  获取所有的成员变量(属性)，不考虑修饰符</li>
<li><code>Field getDeclaredField(String name)</code>  :获取指定名称的当前运行时类的属性，不考虑权限</li>
</ul>
</li>
<li><p>获取构造方法们</p>
<ul>
<li><code>Constructor&lt;?&gt;[] getConstructors()</code>  :获取当前运行时Public修饰的构造方法们</li>
<li><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code>  :获取指定参数的构造方法</li>
<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code>  </li>
<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>  :获取当前运行时构造方法们,不考虑修饰符</li>
</ul>
</li>
<li><p>获取成员方法们(同理加Declared是不考虑修饰符)：</p>
<ul>
<li><code>Method[] getMethods()</code>  </li>
<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code>  </li>
<li><code>Method[] getDeclaredMethods()</code>  </li>
<li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code>  </li>
</ul>
</li>
<li><p>获取全类名:<code>String getName()</code>  </p>
</li>
<li><p>成员变量操作：</p>
<ul>
<li>设置值:<code>void set(Object obj, Object value)</code>  </li>
<li>获取值:<code>get(Object obj)</code> </li>
</ul>
</li>
<li><p>忽略访问权限修饰符的安全检查</p>
<ul>
<li>setAccessible(true):暴力反射</li>
</ul>
</li>
<li><p>创建对象：T newInstance(Object… initargs)<br>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p>
</li>
<li><p>Method：方法对象<br>执行方法：<code>Object invoke(Object obj, Object... args)</code><br>获取方法名称：<code>String getName</code>:获取方法名</p>
</li>
</ol>
<h3 id="2-0-反射的应用"><a href="#2-0-反射的应用" class="headerlink" title="2.0 反射的应用"></a>2.0 反射的应用</h3><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><ul>
<li>原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。 </li>
</ul>
<h4 id="动态代理介绍"><a href="#动态代理介绍" class="headerlink" title="动态代理介绍"></a>动态代理介绍</h4><ol>
<li><p>概念 动态代理是指客户通过代理类来调用其它对象的方法,并且是在程序运行时根据需要动态创建目标类的代理对象.</p>
</li>
<li><p>使用场合 调试及远程方法调用等.</p>
</li>
<li><p>动态代理相关API</p>
<ul>
<li><p>Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。</p>
</li>
<li><p>提供用于创建动态代理类和动态代理对象的静态方法 <code>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)</code>  </p>
</li>
<li><p>创建 一个动态代理类所对应的Class对象 <code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>  直接创建一个动态代理对象(loader:类加载器，interfaces：被代理类实现的全部接口，h：得到InvocationHandler接 口的实现类实例)</p>
</li>
<li><p><code>InvocationHandler</code>：创建一个实现接口InvocationHandler的类，它必须实现invoke方 法，以完成代理的具体操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object theProxy, Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable</span>&#123; </span><br><span class="line">    <span class="keyword">try</span>&#123; Object retval = method.invoke(targetObj, params); <span class="comment">// Print out the result </span></span><br><span class="line">        System.out.println(retval); </span><br><span class="line">    	<span class="keyword">return</span> retval; </span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception exc)&#123;&#125; </span><br><span class="line">&#125;<span class="comment">//theProxy:代理类对象，method：调用的方法，params：调用方法所传入的参数</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<h4 id="静态代理示例"><a href="#静态代理示例" class="headerlink" title="静态代理示例"></a>静态代理示例</h4><p>为了与动态代理相比较,静态代理程序示例如下.不难发现: 如果添加不同接口则需要不同的代理类来完成其代理!很繁琐!</p>
<p>代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。<br>每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静态代理举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClotFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title">ClotFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClotFactory factory;<span class="comment">//拿被代理类对象进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyClothFactory</span><span class="params">(ClotFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory=factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂准备工作&quot;</span>);</span><br><span class="line">        factory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">ClotFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产衣服&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyClothFactory proxyClothFactory = <span class="keyword">new</span> ProxyClothFactory(<span class="keyword">new</span> Factory());</span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态代理示例"><a href="#动态代理示例" class="headerlink" title="动态代理示例"></a>动态代理示例</h4><p><strong>反射的动态性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态代理举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SupperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I Belief I can Fly&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃：&quot;</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态创建代理类</span></span><br><span class="line"><span class="comment">问题：如何根据内存中的被代理类，动态的创建一个代理类及其对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当通过代理类的对象调用方法时，如何动态的区调用被代理类中的同名方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//代理类生产工厂，用这个类来生成代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法返回一个代理类对象，解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler=<span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">        <span class="comment">//java.lang.reflect.Proxy：该类用于动态生成代理类，</span></span><br><span class="line">        <span class="comment">// 只需传入目标接口的类加载器、目标接口以及InvocationHandler便可为目标接口生成代理类及代理对象。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h):</span></span><br><span class="line">        <span class="comment">// 该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要被代理类对象进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当我们通过代理类的对象调用方法A时就睡自动的调用如下方法：invok()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法A的功能声明在invoke中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invok方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//proxyInstance:代理类对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(<span class="keyword">new</span> SupperMan());</span><br><span class="line">        <span class="comment">//当通过代理类调用方法时，会自动的调用被代理类方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;汉堡&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*********&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        ClotFactory proxyInstance1 = (ClotFactory) ProxyFactory.getProxyInstance(factory);</span><br><span class="line">        proxyInstance1.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
</search>
